> Normal javascript code executes on a single thread in the resident html file. If the html file is closed, that code/thread 
  becomes inactive/ inaccessible.
> service workers run in a separate thread than other js-code. 
  >> if initialized in the root index html file, they will be accessible to all application.
  >> they can then globally listen to events and respond to them
  >> they run in background
  >> they are alive even after the browser/app is closed.
  
> "Listenable" events of a service worker
  >> Fetch:- Browser/page-js initiates a fetch (http request). Note that if using libraries like axios, etc., this fetch 
     would not be initiated; otherwise fetch can be initiated.
  >> Push Notifications:- Service workers receive Web Push Notifications (from Server). 
     Server -> Browser Server -> app receives push notification (?)
  >> Notification Interaction:
     - user interacts with the notification
  >> Background Sync:
     - SW receives Background Sync Event (eg. internet is restored)
  >> Service Worker Life Cycle
     - Service Worker live cycle events.
     
---
 
SW Lifecycle:-

index.html -> app.js (we can execute code which registers sw.js)

Registering sw means "app.js tells the browser, do not execute this sw, but mark it as a background process"
2 things happen during registration:-
>> installation ==> emits "install" event, can be used to cache assets ,etc. 
   -- will happen only when atleast 1byte of change is made to sw.js
>> activation ====> will be activated only if older version of sws are closed. only then, browser emits "activate" event 
  -- once activated, it will go into "idle" mode -> n then -> "terminated" mode.
  -- terminated mode does not mean that its uninstalled, but its just sleeping, ; it will become active, for eg. if a fetch-event 
     happens.
  
---

http-server -c-1 (DONT use browser cache). 

scripts:{
  "start": "http-server -c-1"
}

---

DONT add sws in js-code folder. Add it in ur root folder.
---

sw.js is created. 

Q.1. How to register the sw ?
A. 
>> Add it in app.js file
if('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/sw.js') // register() returns a promise
                         .then(function(){
                            console.log('service worker registered');
                         }) 
} // if ends


---

---

---

---
